//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniScript.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, IF=7, ELSE=8, LOOP=9, 
		FOR=10, VAR=11, BREAK=12, CONTINUE=13, NOT=14, EXCLAMATION=15, ASSIGN=16, 
		PLUS=17, MINUS=18, MUL=19, DIV=20, MOD=21, POW=22, LPAREN=23, RPAREN=24, 
		LBRACE=25, RBRACE=26, COMMA=27, SEMICOLON=28, DOT=29, LBRACKET=30, RBRACKET=31, 
		COLON=32, STRING=33, FLOAT=34, NUMBER=35, BOOLEAN=36, IDENTIFIER=37, WS=38, 
		COMMENT=39, MULTILINE_COMMENT=40;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_variableDeclaration = 2, RULE_assignment = 3, 
		RULE_ifStatement = 4, RULE_loopStatement = 5, RULE_forStatement = 6, RULE_breakStatement = 7, 
		RULE_continueStatement = 8, RULE_expressionStatement = 9, RULE_functionCallStatement = 10, 
		RULE_block = 11, RULE_expression = 12, RULE_comparisonExpression = 13, 
		RULE_additiveExpression = 14, RULE_multiplicativeExpression = 15, RULE_powerExpression = 16, 
		RULE_unaryExpression = 17, RULE_primaryExpression = 18, RULE_functionCall = 19, 
		RULE_qualifiedIdentifier = 20, RULE_arrayLiteral = 21, RULE_arrayAccess = 22, 
		RULE_comment = 23, RULE_multilineComment = 24, RULE_error = 25;
	public static readonly string[] ruleNames = {
		"program", "statement", "variableDeclaration", "assignment", "ifStatement", 
		"loopStatement", "forStatement", "breakStatement", "continueStatement", 
		"expressionStatement", "functionCallStatement", "block", "expression", 
		"comparisonExpression", "additiveExpression", "multiplicativeExpression", 
		"powerExpression", "unaryExpression", "primaryExpression", "functionCall", 
		"qualifiedIdentifier", "arrayLiteral", "arrayAccess", "comment", "multilineComment", 
		"error"
	};

	private static readonly string[] _LiteralNames = {
		null, "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'if'", "'else'", 
		"'loop'", "'for'", "'var'", "'break'", "'continue'", "'not'", "'!'", "'='", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'('", "')'", "'{'", "'}'", 
		"','", "';'", "'.'", "'['", "']'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "IF", "ELSE", "LOOP", "FOR", 
		"VAR", "BREAK", "CONTINUE", "NOT", "EXCLAMATION", "ASSIGN", "PLUS", "MINUS", 
		"MUL", "DIV", "MOD", "POW", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COMMA", 
		"SEMICOLON", "DOT", "LBRACKET", "RBRACKET", "COLON", "STRING", "FLOAT", 
		"NUMBER", "BOOLEAN", "IDENTIFIER", "WS", "COMMENT", "MULTILINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1916638002816L) != 0)) {
				{
				{
				State = 52;
				statement();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 58;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultilineCommentContext multilineComment() {
			return GetRuleContext<MultilineCommentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63;
				loopStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 64;
				forStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 65;
				breakStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 66;
				continueStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 67;
				expressionStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 68;
				functionCallStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 69;
				comment();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 70;
				multilineComment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(MiniScriptParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniScriptParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniScriptParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(VAR);
			State = 74;
			Match(IDENTIFIER);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 75;
				Match(ASSIGN);
				State = 76;
				expression();
				}
			}

			State = 79;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniScriptParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniScriptParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 81;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				{
				State = 82;
				arrayAccess();
				}
				break;
			}
			State = 85;
			Match(ASSIGN);
			State = 86;
			expression();
			State = 87;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniScriptParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniScriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniScriptParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(IF);
			State = 90;
			Match(LPAREN);
			State = 91;
			expression();
			State = 92;
			Match(RPAREN);
			State = 93;
			block();
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 94;
				Match(ELSE);
				State = 95;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(MiniScriptParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniScriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(LOOP);
			State = 99;
			Match(LPAREN);
			State = 100;
			expression();
			State = 101;
			Match(RPAREN);
			State = 102;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniScriptParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(MiniScriptParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniScriptParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniScriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(FOR);
			State = 105;
			Match(LPAREN);
			State = 108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				{
				State = 106;
				variableDeclaration();
				}
				break;
			case IDENTIFIER:
				{
				State = 107;
				assignment();
				}
				break;
			case SEMICOLON:
				break;
			default:
				break;
			}
			State = 110;
			Match(SEMICOLON);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 267370545152L) != 0)) {
				{
				State = 111;
				expression();
				}
			}

			State = 114;
			Match(SEMICOLON);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 115;
				assignment();
				}
			}

			State = 118;
			Match(RPAREN);
			State = 119;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MiniScriptParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniScriptParser.SEMICOLON, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(BREAK);
			State = 122;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(MiniScriptParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniScriptParser.SEMICOLON, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(CONTINUE);
			State = 125;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniScriptParser.SEMICOLON, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			expression();
			State = 128;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniScriptParser.SEMICOLON, 0); }
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionCallStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			functionCall();
			State = 131;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniScriptParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniScriptParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(LBRACE);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1916638002816L) != 0)) {
				{
				{
				State = 134;
				statement();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 140;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			comparisonExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonExpressionContext comparisonExpression() {
		ComparisonExpressionContext _localctx = new ComparisonExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_comparisonExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			additiveExpression();
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 126L) != 0)) {
				{
				State = 145;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 146;
				additiveExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(MiniScriptParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(MiniScriptParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MiniScriptParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MiniScriptParser.MINUS, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			multiplicativeExpression();
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 150;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 151;
				multiplicativeExpression();
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowerExpressionContext[] powerExpression() {
			return GetRuleContexts<PowerExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowerExpressionContext powerExpression(int i) {
			return GetRuleContext<PowerExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(MiniScriptParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(MiniScriptParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(MiniScriptParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(MiniScriptParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(MiniScriptParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(MiniScriptParser.MOD, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			powerExpression();
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) {
				{
				{
				State = 158;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 159;
				powerExpression();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(MiniScriptParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PowerExpressionContext powerExpression() {
			return GetRuleContext<PowerExpressionContext>(0);
		}
		public PowerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powerExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowerExpressionContext powerExpression() {
		PowerExpressionContext _localctx = new PowerExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_powerExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			unaryExpression();
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POW) {
				{
				State = 166;
				Match(POW);
				State = 167;
				powerExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniScriptParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniScriptParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MiniScriptParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(MiniScriptParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_unaryExpression);
		int _la;
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case EXCLAMATION:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 442368L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 171;
				unaryExpression();
				}
				break;
			case LPAREN:
			case LBRACKET:
			case STRING:
			case FLOAT:
			case NUMBER:
			case BOOLEAN:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				primaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MiniScriptParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MiniScriptParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MiniScriptParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MiniScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniScriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_primaryExpression);
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				Match(NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				Match(FLOAT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				Match(BOOLEAN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 178;
				Match(STRING);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 179;
				functionCall();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 180;
				arrayAccess();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 181;
				Match(IDENTIFIER);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 182;
				Match(LPAREN);
				State = 183;
				expression();
				State = 184;
				Match(RPAREN);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 186;
				arrayLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniScriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniScriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniScriptParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			qualifiedIdentifier();
			State = 190;
			Match(LPAREN);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 267370545152L) != 0)) {
				{
				State = 191;
				expression();
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 192;
					Match(COMMA);
					State = 193;
					expression();
					}
					}
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 201;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(MiniScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(MiniScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniScriptParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniScriptParser.DOT, i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_qualifiedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(IDENTIFIER);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 204;
				Match(DOT);
				State = 205;
				Match(IDENTIFIER);
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(MiniScriptParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(MiniScriptParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniScriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniScriptParser.COMMA, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(LBRACKET);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 267370545152L) != 0)) {
				{
				State = 212;
				expression();
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 213;
					Match(COMMA);
					State = 214;
					expression();
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 222;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(MiniScriptParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(MiniScriptParser.RBRACKET, 0); }
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 44, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(IDENTIFIER);
			State = 225;
			Match(LBRACKET);
			State = 226;
			expression();
			State = 227;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MiniScriptParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 46, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultilineCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINE_COMMENT() { return GetToken(MiniScriptParser.MULTILINE_COMMENT, 0); }
		public MultilineCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multilineComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultilineComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultilineCommentContext multilineComment() {
		MultilineCommentContext _localctx = new MultilineCommentContext(Context, State);
		EnterRule(_localctx, 48, RULE_multilineComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(MULTILINE_COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniScriptVisitor<TResult> typedVisitor = visitor as IMiniScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(Context, State);
		EnterRule(_localctx, 50, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			MatchWildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,40,236,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,5,0,54,8,0,10,0,12,0,57,9,
		0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,72,8,1,1,2,1,
		2,1,2,1,2,3,2,78,8,2,1,2,1,2,1,3,1,3,3,3,84,8,3,1,3,1,3,1,3,1,3,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,3,4,97,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
		6,3,6,109,8,6,1,6,1,6,3,6,113,8,6,1,6,1,6,3,6,117,8,6,1,6,1,6,1,6,1,7,
		1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,5,11,136,8,11,
		10,11,12,11,139,9,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,3,13,148,8,13,
		1,14,1,14,1,14,5,14,153,8,14,10,14,12,14,156,9,14,1,15,1,15,1,15,5,15,
		161,8,15,10,15,12,15,164,9,15,1,16,1,16,1,16,3,16,169,8,16,1,17,1,17,1,
		17,3,17,174,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,3,18,188,8,18,1,19,1,19,1,19,1,19,1,19,5,19,195,8,19,10,19,12,19,
		198,9,19,3,19,200,8,19,1,19,1,19,1,20,1,20,1,20,5,20,207,8,20,10,20,12,
		20,210,9,20,1,21,1,21,1,21,1,21,5,21,216,8,21,10,21,12,21,219,9,21,3,21,
		221,8,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
		25,1,25,0,0,26,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,0,4,1,0,1,6,1,0,17,18,1,0,19,21,2,0,14,15,17,18,246,
		0,55,1,0,0,0,2,71,1,0,0,0,4,73,1,0,0,0,6,83,1,0,0,0,8,89,1,0,0,0,10,98,
		1,0,0,0,12,104,1,0,0,0,14,121,1,0,0,0,16,124,1,0,0,0,18,127,1,0,0,0,20,
		130,1,0,0,0,22,133,1,0,0,0,24,142,1,0,0,0,26,144,1,0,0,0,28,149,1,0,0,
		0,30,157,1,0,0,0,32,165,1,0,0,0,34,173,1,0,0,0,36,187,1,0,0,0,38,189,1,
		0,0,0,40,203,1,0,0,0,42,211,1,0,0,0,44,224,1,0,0,0,46,229,1,0,0,0,48,231,
		1,0,0,0,50,233,1,0,0,0,52,54,3,2,1,0,53,52,1,0,0,0,54,57,1,0,0,0,55,53,
		1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,57,55,1,0,0,0,58,59,5,0,0,1,59,1,1,
		0,0,0,60,72,3,4,2,0,61,72,3,6,3,0,62,72,3,8,4,0,63,72,3,10,5,0,64,72,3,
		12,6,0,65,72,3,14,7,0,66,72,3,16,8,0,67,72,3,18,9,0,68,72,3,20,10,0,69,
		72,3,46,23,0,70,72,3,48,24,0,71,60,1,0,0,0,71,61,1,0,0,0,71,62,1,0,0,0,
		71,63,1,0,0,0,71,64,1,0,0,0,71,65,1,0,0,0,71,66,1,0,0,0,71,67,1,0,0,0,
		71,68,1,0,0,0,71,69,1,0,0,0,71,70,1,0,0,0,72,3,1,0,0,0,73,74,5,11,0,0,
		74,77,5,37,0,0,75,76,5,16,0,0,76,78,3,24,12,0,77,75,1,0,0,0,77,78,1,0,
		0,0,78,79,1,0,0,0,79,80,5,28,0,0,80,5,1,0,0,0,81,84,5,37,0,0,82,84,3,44,
		22,0,83,81,1,0,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,86,5,16,0,0,86,87,3,
		24,12,0,87,88,5,28,0,0,88,7,1,0,0,0,89,90,5,7,0,0,90,91,5,23,0,0,91,92,
		3,24,12,0,92,93,5,24,0,0,93,96,3,22,11,0,94,95,5,8,0,0,95,97,3,22,11,0,
		96,94,1,0,0,0,96,97,1,0,0,0,97,9,1,0,0,0,98,99,5,9,0,0,99,100,5,23,0,0,
		100,101,3,24,12,0,101,102,5,24,0,0,102,103,3,22,11,0,103,11,1,0,0,0,104,
		105,5,10,0,0,105,108,5,23,0,0,106,109,3,4,2,0,107,109,3,6,3,0,108,106,
		1,0,0,0,108,107,1,0,0,0,108,109,1,0,0,0,109,110,1,0,0,0,110,112,5,28,0,
		0,111,113,3,24,12,0,112,111,1,0,0,0,112,113,1,0,0,0,113,114,1,0,0,0,114,
		116,5,28,0,0,115,117,3,6,3,0,116,115,1,0,0,0,116,117,1,0,0,0,117,118,1,
		0,0,0,118,119,5,24,0,0,119,120,3,22,11,0,120,13,1,0,0,0,121,122,5,12,0,
		0,122,123,5,28,0,0,123,15,1,0,0,0,124,125,5,13,0,0,125,126,5,28,0,0,126,
		17,1,0,0,0,127,128,3,24,12,0,128,129,5,28,0,0,129,19,1,0,0,0,130,131,3,
		38,19,0,131,132,5,28,0,0,132,21,1,0,0,0,133,137,5,25,0,0,134,136,3,2,1,
		0,135,134,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,
		140,1,0,0,0,139,137,1,0,0,0,140,141,5,26,0,0,141,23,1,0,0,0,142,143,3,
		26,13,0,143,25,1,0,0,0,144,147,3,28,14,0,145,146,7,0,0,0,146,148,3,28,
		14,0,147,145,1,0,0,0,147,148,1,0,0,0,148,27,1,0,0,0,149,154,3,30,15,0,
		150,151,7,1,0,0,151,153,3,30,15,0,152,150,1,0,0,0,153,156,1,0,0,0,154,
		152,1,0,0,0,154,155,1,0,0,0,155,29,1,0,0,0,156,154,1,0,0,0,157,162,3,32,
		16,0,158,159,7,2,0,0,159,161,3,32,16,0,160,158,1,0,0,0,161,164,1,0,0,0,
		162,160,1,0,0,0,162,163,1,0,0,0,163,31,1,0,0,0,164,162,1,0,0,0,165,168,
		3,34,17,0,166,167,5,22,0,0,167,169,3,32,16,0,168,166,1,0,0,0,168,169,1,
		0,0,0,169,33,1,0,0,0,170,171,7,3,0,0,171,174,3,34,17,0,172,174,3,36,18,
		0,173,170,1,0,0,0,173,172,1,0,0,0,174,35,1,0,0,0,175,188,5,35,0,0,176,
		188,5,34,0,0,177,188,5,36,0,0,178,188,5,33,0,0,179,188,3,38,19,0,180,188,
		3,44,22,0,181,188,5,37,0,0,182,183,5,23,0,0,183,184,3,24,12,0,184,185,
		5,24,0,0,185,188,1,0,0,0,186,188,3,42,21,0,187,175,1,0,0,0,187,176,1,0,
		0,0,187,177,1,0,0,0,187,178,1,0,0,0,187,179,1,0,0,0,187,180,1,0,0,0,187,
		181,1,0,0,0,187,182,1,0,0,0,187,186,1,0,0,0,188,37,1,0,0,0,189,190,3,40,
		20,0,190,199,5,23,0,0,191,196,3,24,12,0,192,193,5,27,0,0,193,195,3,24,
		12,0,194,192,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,
		200,1,0,0,0,198,196,1,0,0,0,199,191,1,0,0,0,199,200,1,0,0,0,200,201,1,
		0,0,0,201,202,5,24,0,0,202,39,1,0,0,0,203,208,5,37,0,0,204,205,5,29,0,
		0,205,207,5,37,0,0,206,204,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,
		209,1,0,0,0,209,41,1,0,0,0,210,208,1,0,0,0,211,220,5,30,0,0,212,217,3,
		24,12,0,213,214,5,27,0,0,214,216,3,24,12,0,215,213,1,0,0,0,216,219,1,0,
		0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,220,
		212,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,223,5,31,0,0,223,43,1,
		0,0,0,224,225,5,37,0,0,225,226,5,30,0,0,226,227,3,24,12,0,227,228,5,31,
		0,0,228,45,1,0,0,0,229,230,5,39,0,0,230,47,1,0,0,0,231,232,5,40,0,0,232,
		49,1,0,0,0,233,234,9,0,0,0,234,51,1,0,0,0,20,55,71,77,83,96,108,112,116,
		137,147,154,162,168,173,187,196,199,208,217,220
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
