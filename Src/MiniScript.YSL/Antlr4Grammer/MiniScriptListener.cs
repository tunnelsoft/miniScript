//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniScript.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MiniScriptParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IMiniScriptListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] MiniScriptParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] MiniScriptParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] MiniScriptParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] MiniScriptParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] MiniScriptParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] MiniScriptParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] MiniScriptParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] MiniScriptParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] MiniScriptParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] MiniScriptParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.loopStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopStatement([NotNull] MiniScriptParser.LoopStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.loopStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopStatement([NotNull] MiniScriptParser.LoopStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] MiniScriptParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] MiniScriptParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] MiniScriptParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] MiniScriptParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueStatement([NotNull] MiniScriptParser.ContinueStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueStatement([NotNull] MiniScriptParser.ContinueStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] MiniScriptParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] MiniScriptParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.functionCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallStatement([NotNull] MiniScriptParser.FunctionCallStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.functionCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallStatement([NotNull] MiniScriptParser.FunctionCallStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] MiniScriptParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] MiniScriptParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] MiniScriptParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] MiniScriptParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.comparisonExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonExpression([NotNull] MiniScriptParser.ComparisonExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.comparisonExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonExpression([NotNull] MiniScriptParser.ComparisonExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.additiveExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] MiniScriptParser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.additiveExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] MiniScriptParser.AdditiveExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.multiplicativeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] MiniScriptParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.multiplicativeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] MiniScriptParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.powerExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPowerExpression([NotNull] MiniScriptParser.PowerExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.powerExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPowerExpression([NotNull] MiniScriptParser.PowerExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.unaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryExpression([NotNull] MiniScriptParser.UnaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.unaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryExpression([NotNull] MiniScriptParser.UnaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimaryExpression([NotNull] MiniScriptParser.PrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimaryExpression([NotNull] MiniScriptParser.PrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] MiniScriptParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] MiniScriptParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.qualifiedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualifiedIdentifier([NotNull] MiniScriptParser.QualifiedIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.qualifiedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualifiedIdentifier([NotNull] MiniScriptParser.QualifiedIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLiteral([NotNull] MiniScriptParser.ArrayLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLiteral([NotNull] MiniScriptParser.ArrayLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.arrayAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayAccess([NotNull] MiniScriptParser.ArrayAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.arrayAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayAccess([NotNull] MiniScriptParser.ArrayAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComment([NotNull] MiniScriptParser.CommentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComment([NotNull] MiniScriptParser.CommentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniScriptParser.multilineComment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultilineComment([NotNull] MiniScriptParser.MultilineCommentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniScriptParser.multilineComment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultilineComment([NotNull] MiniScriptParser.MultilineCommentContext context);
}
