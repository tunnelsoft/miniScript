//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniScript.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="MiniScriptParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IMiniScriptVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] MiniScriptParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] MiniScriptParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDeclaration([NotNull] MiniScriptParser.VariableDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] MiniScriptParser.AssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] MiniScriptParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.loopStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLoopStatement([NotNull] MiniScriptParser.LoopStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] MiniScriptParser.ForStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakStatement([NotNull] MiniScriptParser.BreakStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitContinueStatement([NotNull] MiniScriptParser.ContinueStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionStatement([NotNull] MiniScriptParser.ExpressionStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.functionCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCallStatement([NotNull] MiniScriptParser.FunctionCallStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] MiniScriptParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] MiniScriptParser.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.comparisonExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparisonExpression([NotNull] MiniScriptParser.ComparisonExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.additiveExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditiveExpression([NotNull] MiniScriptParser.AdditiveExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.multiplicativeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicativeExpression([NotNull] MiniScriptParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.powerExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPowerExpression([NotNull] MiniScriptParser.PowerExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.unaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryExpression([NotNull] MiniScriptParser.UnaryExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimaryExpression([NotNull] MiniScriptParser.PrimaryExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] MiniScriptParser.FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.qualifiedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQualifiedIdentifier([NotNull] MiniScriptParser.QualifiedIdentifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayLiteral([NotNull] MiniScriptParser.ArrayLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.arrayAccess"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayAccess([NotNull] MiniScriptParser.ArrayAccessContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComment([NotNull] MiniScriptParser.CommentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.multilineComment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultilineComment([NotNull] MiniScriptParser.MultilineCommentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniScriptParser.error"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitError([NotNull] MiniScriptParser.ErrorContext context);
}
